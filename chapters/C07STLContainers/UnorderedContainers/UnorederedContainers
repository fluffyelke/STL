CREATE, COPY AND DESTROY
hf-hash function
Operation                              Effect

Unord c                                -Default constructor, creates an empty unordered container without any elements

Unord c(bnum)                          -Creates an empty unordered container that internally uses at least bnum buckets

Unord c(bnum, hf)                      -Creates an empty unordered container that internally uses at least bnum buckets, and hf as hash function

Unord c(bnum, hf, cmp)                 -Creates an empty unordered container that internally uses at least bnum buckets, and hf as hash function and cmp, as predicate to identify equal values

Unord c(c2)                            -Copy constructor, creates a copy of another unordered container of the same type(all elements are copied)

Unord c = c2                           -Copy constructor, creates a copy of another unordered container of the same type(all elements are copied)

Unord c(rv)                            -Move constructor, creates an unordered container taking the contents of rvalue rv

Unord c = rv                           -Move constructor, creates an unordered container taking the contents of rvalue rv

Unord c(beg, end)                      -Creates unordered container initiliazed by elements of the range [beg, end)

Unord c(beg, end, bnum)                -Creates unordered container initiliazed by elements of the range [beg, end) that internally uses atleast bnum buckets

Unord c(beg, end, bnum, hf)            -Creates unordered container initiliazed by elements of the range [beg, end) that internally uses atleast bnum buckets, and hf as hash function

Unord c(beg, end, bnum, hf, cmp)       -Creates unordered container initiliazed by elements of the range [beg, end) that internally uses atleast bnum buckets, and hf as hash function  and cmp, as predicate to identify equal values

Unord c(initlist)                      -Creates an unordered unordered container initialized by the elements of the initializer list initlist

Unord c = initlist                     -Creates an unordered unordered container initialized by the elements of the initializer list initlist

c~Unord()                              -Destroys all elements and frees memory



Unord                                  Effect
unordered_set<Elem>                    An unordered set that by default hashes with hash<> and compares equal_to<>(operator ==)
unordered_set<Elem, Hash>              An unordered set that by default hashes with Hash and compares equal_to<>(operator ==)
unordered_set<Elem, Hash, Cmp>         An unordered set that by default hashes with Hash and compares with Cmp

unordered_multiset<Elem>               An unordered multiset that by default hashes with hash<> and compares equal_to<>(operator ==)
unordered_multiset<Elem, Hash>         An unordered multiset that by default hashes with Hash and compares equal_to<>(operator ==)
unordered_multiset<Elem, Hash, Cmp>    An unordered multiset that by default hashes with Hash and compares with Cmp

unordered_map<Key, T>                  An unordered map that by default hashes with hash<> and compares equal_to<>(operator ==)
unordered_map<Key, T, Hash>            An unordered map that by default hashes with Hash and compares equal_to<>(operator ==)
unordered_map<Key, T, Hash, Cmp>       An unordered map that by default hashes with Hash and compares with Cmp

unordered_multimap<Key, T>             An unordered multimap that by default hashes with hash<> and compares equal_to<>(operator ==)
unordered_multimap<Key, T, Hash>       An unordered multimap that by default hashes with Hash and compares equal_to<>(operator ==)
unordered_multimap<Key, T, Hash, Cmp>  An unordered multimap that by default hashes with Hash and compares with Cmp



LAYOUT OPERATIONS
Operation                              Effect
c.hash_function()                      Returns the hash function

c.key_eq()                             Returns the equivalence predicate

c.bucket_count()                       Returns the current number of buckets

c.max_bucket_count()                   Returns maximum number of buckets possible

c.load_factor()                        Returns the current load factor

c.max_load_factor(val)                 Returns the maximum load factor

c.max_load_factor(val)                 Sets the maximum load factor of val

c.rehas(bnum)                          Rehashes the container so that it has bucket size of atleast bnum 

c.reserve(num)                         Rehashes the container so that is has space for atleast num elements


NON-MODIFYING OPERATIONS
Operation                       Effect

c.empty()                       Returns whether the container is empty. equivalent to size() == 0, but might be faster.

c.size()                        Returns the current number of elements

c.max_size()                    Returns the maximum number of elements possible

c1 == c2                        Returns whether c1 is equal to c2 (calls  == for the elements)

c1 != c2                        Returns whether c1 is not equal to c2 (equivalent !(c1 == c2))


SPECIAL SEARCH OPERATIONS FOR SET AND MULTISET
Operation                       Effect

c.count(val)                    Returns the number of elements with value val

c.find(val)                     Returns the position of the first element with value val or end() if none found

c.equal_range(val)              Returns a range with all elements with a value equal to val(i.e. the first and last position where val would get inserted)


ASSIGNMENTS
Operation                       Effect
c = c2                          Assign all elements of c2 to c

c = rv                          Move assignment all elements of the rvalue rv to c (Since C++11)

c = initlist                    Assign all elements of the initializer list initlist to c(Since C++11)

c1.swap(c2)                     Swaps the data of c1 and c2     

swap(c1, c2)                    Swaps the data of c1 and c2 



ITERATOR FUNCTIONS
Operation                       Effect
c.begin()                       Returns a forward iterator for first element

c.end()                         Returns a forward iterator for the position after last element

c.cbegin()                      Returns a forward iterator for first element(Since C++11)

c.cend()                        Returns a constant forward iterator for the position after last element(Since C++11)

c.rbegin()                      Returns a reverse iterator for position of first element of a reverse iteration.

c.rend()                        Returns a reverse iterator for the position after the last element of a reverse iteration.

c.crbegin()                     Returns a constant reverse iterator for position of first element of a reverse iteration.(Since C++11)

c.crend()                       Returns a constant reverse iterator for the position after the last element of a reverse iteration.(Since C++11)

 
INSERTING AND REMOVING FUNCTIONS
Operation                       Effect
c.insert(val)                   Inserts a copy of val and returns the position of the new element and, for sets, whether succeeded

c.insert(pos, val)              Inserts a copy of val and returns the position of the new element (pos is used as a hint pointing to where the insert should start the search)

c.insert(beg, end)              Inserts a copy of all elements of the range [beg, end) returns nothing

c.insert(initlist)              Inserts a copy of all elements of the initializer list initlist

c.emplace(args...)              Inserts a copy of an element initialized with args and returns the position of the new element and, for sets, whether succeeded

c.emplace_hint(pos, args...)    Inserts a copy of an element initialized with args and returns the position of the new element (pos is used as a hint pointing to where the insert should start the search)

c.erase(val)                    Removes the elements equal to val, and returns number of removed elements

c.erase(pos)                    Removes the element at iterator position pos, and returns the following position

c.erase(beg, end)               Removes all elements in the range [beg, end) and returns the following position

c.clear()                       Removes all elements(empties the container)


THE BUCKET INTERFACE
Operation                       Effect
c.bucket_count()                Returns the current number of buckets

c.bucket(val)                   Returns the index of the bucket in which val would/could be found

c.bucket_size(buckidx)          Returns number of elements in the bucket with index buckidx

c.begin(buckidx)                Returns a forward iterator for first element of the bucket with index buckidx

c.end(buckidx)                  Returns a forward iterator for the position after last element of the bucket with index buckidx

c.cbegin(buckidx)               Returns a forward iterator for first element(Since C++11) of the bucket with index buckidx

c.cend(buckidx)                 Returns a constant forward iterator for the position after last element(Since C++11) of the bucket with index buckidx       


FOR unordered_map and unordered_multimap
ELEMENT ACCESS
Operation                       Effect
c[key]                          Inserts an element with key, if does not yet exist, and returns a reference, to the value of the element with key(only for non constant map)

c.at(key)                       Returns the reference to the value of the element with key(Since C++11)

